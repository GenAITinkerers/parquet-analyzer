To run two different services (for example, two Python scripts or apps) using Docker, the best practice is to use Docker Compose. Docker Compose allows you to define and run multiple containers as services, each with its own configuration.

Solution: Use Docker Compose
Create a docker-compose.yml file in your project root.
Define each service (e.g., service1, service2) with its own command.

----


version: '3.8'

services:
  # Service to load parquet data
  load_parquet:
    build:
      context: .           # Build Docker image from current directory
      dockerfile: Dockerfile # Use the Dockerfile in this directory (corrected spelling)
    command: python src/parquet/load_parquet.py # Command to run for this service
    volumes:
      - ./data:/app/data   # Mount local data directory into the container
    working_dir: /app      # Set working directory inside the container

  # Service to compute statistics (e.g., median)
  load_csv:
    build:
      context: .           # Build Docker image from current directory
      dockerfile: Dockerfile # Use the Dockerfile in this directory (corrected spelling)
    command: python src/parquet/load_csv.py # Command to run for this service
    volumes:
      - ./data:/app/data   # Mount local data directory into the container
    working_dir: /app      # Set working directory inside the container
    
---

Replace src/other_script.py with your second service's entry point.
Both services use the same Docker image but run different commands.
The volumes line ensures both services see the same data directory (optional, but useful for development).


---

How to run
docker-compose up --build

Summary:

Use Docker Compose to run multiple services.
Each service can run a different script or app.
You only need one Dockerfile; Compose handles the rest.